COA ( computer organization architecture)
-----------------------------------------
==> a computer is an electronic decice that accepts input from the outside world and processes them according to some predefined instructions and produces output for the outside world.
components :- input devices, memory, processor, output devices
memory = main memory
fig :- i|p, o|p, cpu diagram

memory:- primary memory --> RAM & ROM
if we have 2^11 memory location in memory then we can perfrom any opration(read|write) in any address|location of memory in the same speed in RAM.

memory capacity
---------------
bit :- binary digit (0|1)
byte :- a group of 8 bits
nibble :- a group of 4 bits
word :- the maximum number of bits that a processor recognizes for a basic ALU operation|memory read|write operation. eg:- 32bit processor, 64bit processor
or,
the maximum number of bit it will get for a read|write operation in one single memory operation
secondary memory :- permanent storage. while the program is running its running on main memory but when we save the program then it gets saved on secondary memory.

bit :- binary digit (0|1)
byte :- a group of 8 bits
nibble :- a group of 4 bits
2^3 = 8
2^4 = 16
2^5 = 32
2^6 = 64
2^7 = 128
2^8 = 256
2^9 = 512
2^10 = 1024 = 1K
2^20 = 1M = 1K * 1K
2^30 = 1G = 1K * 1K * 1K
2^40 = 1T = 1K * 1K * 1K * 1K

--> if memory capacity is 1KB then it mean that memory has got 1K memory location and each location can hold 1 byte of information

Q) a processor is connected to a 128G*32 memory module. what is the width of its address bus and data bus ?
==> set of wire which carry address is called address bus it is unidirectional but data bus is bidirectional because it may give data or receive data to store in some location from processor.

128G = 128   G
     = 2^7 * 2^30
     = 2^37
37 bits are required to represent the address of memory
in 1 bit 32 bit are stored
i.e. width of address bus = 37
width of data bus = 32

CPU
---
it contains i) ALU (arithmetic & logical unit)    ii) register set       iii) control unit

register :- repeated things are kept in register
control unit :- i|p, o|p, addresses allocation is controlled by control unit

assembly language :- low level language, hardware dependent, for particular process one set of instruction are there
ADD A, R1
==> we will perform addition on the content of memory location A & the content of register R1 and result will be stored in R1
R1 = register
A = variable | name of a memory location

--> time are calculated using clock cycle _[]_[]_[]_[]_[]_ it is 5 clock cycle

Q) one instruction requires 7 clock cycle to complete its execution. how much time is required for that instruction if the processor speed is 5GHz?
==> 
 5GHz = 5 * 10^9 clock cycle (cc) in 1second
a/c to question
7cc = (7/5)*10^-9sec = 7/5 nanosecond


register
----------
1. dedicated	2. general purpose register (GPR)

1. decicated
PC, MAR, MDR, IR, SP
PC (program counter):- it points to the next instruction to be executed
MAR (memory address register):- it holds the address of the memory location from where any memory operation (read|write) is going to take place
MDR (memory data register):- it contains the data that is being read from the data that is being written into memory during a write operation
IR (instruction register):- it contains the current instruction being executed
SP (stack pointer):- it points to the top of the stack. stack grows downward in the memory. For push operation, SP is first decremented and for pop operation, SP is incremented after the operation.

2. general purpose register:- these are programmer visible register that can be used as operands in an instruction.
fig:- connections between processor and memory

instruction cycle:- it consists of:
i) fetch the instruction pointed by PC into IR
ii) decode the instruction
iii) fetch the operands (if required)
iv) execute the instruction
v) store the result into memory (if required)
here steps c & d are optional

a) fetch the instruction pointed by PC into IR
i) [PC] --> MAR
ii) generate the 'Read' signal
iii) wait for the MFC (memory function to complete)
iv) [MDR] --> IR

b) decode the instruction:- decoder is connected to IR. Hence, the instruction is decoded immediately and what is the operation to be performed is found out.

eg:- Q) ADD R1, R2
==> here R1,R2 is inside processor not in memory
i) [PC] --> MAR
ii) generate the 'Read' signal
iii) wait for the MFC (memory function to complete)
iv) [MDR] --> IR
v) decode the instruction
vi) execute the instruction :- ALU will perform the addition on the contents of R1 and R2 and result of addition will be stored into R2.

Q) ADD A, R1
==> A is in memory & R1 is in register|processor & result are stored in R1
here content of memory location A will be added to register R1 & result are stored in R1
i) [PC] --> MAR
ii) generate the 'Read' signal
iii) wait for the MFC (memory function to complete)
iv) [MDR] --> IR
v) decode the instruction
vi) fetch the operand stored at memory location A
	a) address part of IR --> MAR
	b) generate the 'read' signal
	c) wait for the MFC (memory function to complete)
	d) [MDR] --> input of ALU (not to IR bcz we brought operant not instruction)
vii) execute the instruction :- ALU will perform the addition on the contents of memory location A and R1 and result of addition will be stored into R1.

Q) How many times the memory is referred to execute the instruction: ADD A, R1
==> [MAR] ---> [MDR] is 1 memory reference
i) to fetch the instruction
ii) to fetch the operand from memory location A
1 + 1 = 2 times 

Q) ADD R1, A
==> here it is adding the content of memory location A with the content of register R1 and storing the result in memory location A
i) [PC] --> MAR
ii) generate the 'Read' signal
iii) wait for the MFC (memory function to complete)
iv) [MDR] --> IR
v) decode the instruction
vi) fetch the operand stored at memory location A
	a) address part of IR --> MAR
	b) generate the 'read' signal
	c) wait for the MFC (memory function to complete)
	d) [MDR] --> input of ALU (not to IR bcz we brought operant not instruction)

vii) execute the instruction :- ALU will perform the addition on the contents of memory location A and R1.
viii) store the result into the memory location A.
	a) address part of IR --> MAR
	b) MDR <-- result from ALU
	c) generate the 'write' signal
	d) wait for the MFC (memory function to complete)
total memory references = 3
i) to fetch the instruction 
ii) to fetch the operand from memory location A
iii) to store the result into memory location A

Q) How many times the memory is referred to execute the instruction: ADD R1, R2
==> 1

Q) How many times the memory is referred to execute the instruction: MOV R1, A
==> 2   i) for instruction  ii) while performing 'write' in A

Q) How many times the memory is referred to execute the instruction: MOV A, R1
==> 2	i) for instruction  ii) while getting content of A from memory

Q) A processor is connected to a 4G*32 bit memory module. A program is kept in 100th address of the memory and the maximum length of each instruction of the program is of 32 bits. Then find out size of MAR, MDR, IR and also the content of PC?
==> 4    G	* 32
  = 2^2  2^30     length of each location
  = 2^32
content of PC = 100 ( program is kept in 100th address of the memory)
MAR= 32bit (2^32 i.e. 32)
MDR= 32 (length of each location is 32)
IR= 32 (maximum length of each instruction of the program is of 32 bits)

Q) A processor has 48-bit instruction composed of two fields: the first two bytes contain the opcode and the remainder a memory operand address. how many bits are nedded for the program counter and the instruction register ?
==> 
<----------------48--------------->
[opcode | memory operand addresss]
<--16---><--------------32-------->
2byte = 16bit
IR = 48bits (A processor has 48-bit instruction)
PC = 32bits (memory operand addresss contains 32bits)

CPU organization > general register organization CPU : 3 address instruction
-----------------------------------------------------------------------------
i)single accumulator organization (one address instruction)
ii)general register organization (two and three address instruction)
iii) stack organization (zero address instruction)

Q) three address instruction: X = (A+B)*(C+D)
==> general format :
opcode destination, src1, src2
Note: the order of operands vary from architecture to architecture.
ADD R1,A,B //R1 <-- MEM[A]+MEM[B]
ADD R2,C,D //R2 <-- MEM[C]+MEM[D]
MUL X,R1,R2 //MEM[X] <-- [R1]*[R2]

Q) two address instruction: X = (A+B)*(C+D)
==> general format :
opcode destination/src1, src2
Note: the order of operands vary from architecture to architecture.
# don't write A,B together it gets modified in two address instruction to avoid it MOV one variable value in register.
MOV R1,A //R1 <-- MEM[A]
ADD R1,B // R1 <-- [R1]+MEM[B]
MOV R2,C //R2 <-- MEM[C]
ADD R2,D //R2 <-- [R2]+MEM[D]
MUL R1,R2 // R1 <-- [R1]*[R2]
MOV X,R1 //MEM[X] <-- [R1]

Q) one address instruction: X = (A+B)*(C+D)
==> this uses accumulator(AC) register for all data manipulations. here AC is assumed to be one of the operands for all the instructions.
LOAD: from memory to accumulator
STORE: from accumulator to memory
LOAD A //Acc <-- MEM[A]
ADD B //Acc <-- [Acc] + MEM[B]
STORE T //MEM[T] <-- [Acc]
LOAD C // Acc <-- [Mem[C]]
ADD D // Acc <-- [Acc] + Mem[D]
MUL T // Acc <-- [Acc]*Mem[T]
STORE X // MEM[X] <-- [Acc]

Q) zero address instruction: X = (A+B)*(C+D)
a stack-organized computer doesn't use the address field for the instructions like ADD, MUL, XOR etc. Operand is speified only for Push and Pop operations. The top two contents from the stack is popped out and the operation is performed and then the result is pushed back onto the stack.
PUSH A //STACK[TOP]<--MEM[A]
PUSH B //STACK[TOP]<--MEM[B]
ADD //STACK[TOP+1]<--STACK[TOP+1]+STACK[TOP]
PUSH C //STACK[TOP]<--MEM[C]
PUSH D //STACK[TOP]<--MEM[D]
ADD //STACK[TOP+1]<--STACK[TOP+1]+STACK[TOP]
MUL //STACK[TOP+1]<--STACK[TOP+1]*STACK[TOP]
POP X //X<--STACK[TOP]

Q) three address instruction: X = (P+Q)*R/S+(T-U)/V
==> 
ADD R1, P, Q
MUL R1, R1, R
DIV R1, R1, S
SUB R2, T, U
DIV R2, R2, V
ADD X, R1, R2


(two address instruction)
MOV R1, P
ADD R1, Q
MUL R1, R
DIV R1, S
MOV R2, T
SUB R2, U
DIV R2, V
ADD R1, R2
MOV X, R1


(one address instruction)
LOAD P
ADD Q
MUL R
DIV S
STORE TEMP
LOAD T
SUB U
DIV V
ADD TEMP
STORE X


(zero address instruction)
PUSH P
PUSH Q
ADD
PUSH R
MUL
PUSH S
DIV
PUSH T
PUSH U
SUB
PUSH V
DIV
ADD
POP X


RISC(Reduced Instruction Set Computer) Instruction: all data manipulation operations take place using three address instructions, and all three in general purpose registers.
to transfer the data from memory to a general purpose reg:
	Load Ri, M //Ri is a GPR, M is a memory location
to transfer the data from a general purpose reg to a memory locaton
	Store M, Ri //Ri is a GPR, M is a memory location

 X = (P+Q)*R/S+(T-U)/V
==>
LOAD R1, P
LOAD R2, Q
ADD R1, R1, R2
LOAD R2, R
MUL R1, R1, R2
LOAD R2, S
DIV R1, R1, R2
LOAD R2, T
LOAD R3, U
SUB R2, R2, R3
LOAD R3, V
DIV R2, R2, R3
ADD R1, R1, R2
STORE X, R1

BUS :- a set of wire which carry information
types(based on number):- i) single bus		ii) multi  bus


     input   output   memory processor
	|	^	^	^
	|	|	|	|
	|	|	|	|
	|	|	|	|
	v	|	v	v
<------------------------------------------>
fig:- single bus structure

types(based on type of information carrying)
i) address bus:- unidirectional
ii) data bus:- bidirectional
iii) control bus:- bidirectional

types(based on connection)
i) internal bus:- it connects internal componnet
ii) external bus:- it connects external components

-->computer architecture is the design of the system, visible to the assembly language programmer
	i)instruction set:- ADD, SUB, XOR, AND
	ii)how many register
	iii)memory addressing scheme/addressing modes

-->organization is how the architecture is implemented
	i) how much cache memory
	ii) implementation technology

# All computers in the intel pentium series have the same architecture but each version of pentium has a different organization or implememtation.

Von Neumann's stored program concept
-------------------------------------
john von neumann has invented a machine in institute of advanced studies in 1945 to 1952 which is named as stored program digital computer.
it keept its programmed instruction as well as data in the same RAM
parallelism(piplining) is not supported by this architecture.

Harvard architecture
---------------------
in this design, instruction and data are stored in separate memory.
it uses separate bus for instruction and data

Von Neumann V/S Harvard architecture
------------------------------------
instruction & data is in same memory----different memory
same bus for carrying information & data---different bus
piplining is not supported---supported


Addressing Modes
----------------
the addressing mode refers to the way in which the operand of an instruction is specified.
i) Implied Mode:- In this mode the operands are specified implicitly in the definition of the instruction.
Eg:- COM // complement accumulator
No. of memory references to execute this instruction is --> 1

ii) Immediate Mode:- In this mode, the operand is specified as part of the instruction itself.
OpCode	Source	Destination
MOV	#200,	R1
(#200--> 200 in assembly language it represent address of operant or operant. if #200 then it is operant)
here the value 200 is moved to the register R1.
# is used to indicate an immediate operand. as a number may represent an address also
No. of memory references to execute the above instruction is --> 1

iii) Register Mode:- in this mode, the operand is specified as the content of a general purpose register.
Eg:- MOV R1, R2
No. of memory references to execute the above instruction is --> 1

iv) Direct|Absolute Mode:- in this mode, the operand is there in the memory, the address of the operand is specified in the instruction only.
Eg:- MOV NUM, R2
     MOV 2000, R2
No. of memory references to execute the above instruction is --> 2

v) Register Indirect Mode:- in this mode, the operand is there in the memory, whose address is specified as the content of a register.
EA(effective address) = (Ri)
Eg:- MOV(R1), R2 // R2<--MEM[R1] ==> R1 is containing address and in that address data is present and that data is moved to R2. same like pointer* in programming
No. of memory references to execute the above instruction is --> 2

vi) Memory Indirect Mode:- in this mode, the operand is there in the memory, whose address is specified as the content of another memory location in the instruction. i.e. the address of the address of the operand is specified in the instruction.
(here in one address follows another address and in that address the data is stored. same like pointer pointer in programming **)
Eg:- MOV(500), R2 // R2<-- MEM[MEM[500]]
==> at 500 one address is stored and in that address data is stored which is moved to R2
or,  MOV(NUM), R2 // R2<-- MEM[MEM[NUM]]
No. of memory references to execute the above instruction is --> 3

Index Addressing Mode
----------------------
In this mode, the operand is there in the memory, whose address is the sum of the offset and content of index register. Offset is specified in the address of the instruction. offset represents relative displacement. i.e. how far the oprand is located from the base.
Eg:- MOV 20(R1),R2 //R2<--MEM[20+[R1]]
here, R1 contains address and in that address 20 is added and in the new 20 added new address there is data which is moved to R2.
Note:- In the effective address generation, index register content is not modified. It is not only used in the process.
No. of memory references to execute the above instruction is --> 2
eg:-
N	n
List	student id
List+4	test 1	|
List+8	test 2	|-student 1
List+12	test 3	|
	student
	test 1	|
	test 2	|-student 2
	test 3	|
	.
	.
	.
if the 1st student data is stored in memory from location 1000, then the next student data will found at location 1016.

Q) Program to add the average of score of three tests for a class having N number of students.
==> 
MOVE #LIST, R0 //any register address is given to register R0
CLEAR R1 // initialize R1 with 0 value for addition
CLEAR R2
CLEAR R3
MOVE N, R4 // R4 is a counter, transfer the content of memory location N to R4
LOOP ADD4(R0), R1
ADD 4(R0), R1 //in the located previous address of R0 4 is added redirect to that address and that address data is added with R1
ADD 8(R0), R2
ADD 12(R0), R3
ADD #16, R0 // 16 is the reference point which is going to added with R0
DECREMENT R4 // decreasing the R4 value i.e. counter
BRANCH > 0 LOOP // decreasing the R4 till it became 0, if the instruction is > 0 then goto the level of instruction i.e. LOOP
MOVE R1, SUM1 // move data of R1 to SUM1
MOVE R2, SUM2
MOVE R3, SUM3

Relative Addressing Mode
------------------------
Another varaiants:

i) (Ri, Rj)
EA=[Ri]+[Rj]

ii) X(Ri,Rj)
EA=X+[Ri]+[Rj]

Relative mode:- in this mode, the effective address is generated using offset and the contents of PC Program Counter.
Eg:- BRANCH > 0 LOOP
MOVE N, R1 //counter value to R1
MOVE #NUM1, R2 // NUM1 is base address putting to R2
CLEAR R0 // initializing  R0 to 0
LOOP ADD(R2), R0 // R2 is holding address and that data is added with R0
ADD #4, R2 // in R2 address 4 is added to address and pointed to new added address
DECREMENT R1 //
BRANCH >0 LOOP
MOVE R0, SUM
--> Here, when the branch instrument is executed, that time, the value of PC will be 1016(address of the next instruction), so from that value of PC, we need to set PC at 1000, to jump to the branch target instruction(add instruction). So -16 will be added with 1016 to get the value 1000. -16 is represented as offset in the label of the branch instruction. Here it is LOOP. i.e., LOOP is represented as -16.
X-X-X-X-X-X




tri































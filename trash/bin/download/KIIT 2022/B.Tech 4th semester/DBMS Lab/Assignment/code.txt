Projection:-
1) write a query to display AGE and MARKS of all the students.
==> select AGE, MARKS from student;

2) write a query to display NAME and USN of the student whose age is greater than 21
==> select NAME, USN from student where AGE>21;

3) write a query to display all the information of student named "Bibek".
==> select * from student where NAME='Bibek';

4) write a query to display NAME, GENDER and USN of student named "Bibek".
==> slect NAME, GENDER, USN from student where NAME='Ravi';

5) character data types:- char, varchar2, varchar, long
6) number data type:- float
7) date data type:- 

====operator===
8) increase the salary by 2000
==> select ENAME, SAL+2000 from EMP;

9) show annual salary
==> select ENAME, SAL*12 from EMP;

10) precedance of operator:- *, /, +, -

11) column alias:- select USN as REGI_NUM, NAME, AGE as YEARS_OLD from student;

12) show unique value i.e. not repeated:- select distinct AGE from student;

13) concatenation i.e. combine multiple data or column:- select NAME || AGE as "NAME & AGE" from student;

# to add 'aged' word in middle:- select NAME || 'aged' || AGE as "STUDENT_DETAILS" from student;

14) select * from dual i.e. it shows dummy table consist of one-column & one-row

15) desc dual :- shows description of dual table

16) check the system date from dual table:- select SYSDATE from DUAL;

17) Perform arithmetic calculation using DUAL table:- select 18+52-7*4/9 from DUAL;

18) relational operators
=	equal to
>	greater than
<	lesser than
>=	greater than or equal to
<=	lesser than or equal to
!=	not equal to
<>	not equal to
^=	not equal to

19) precedence:- =, >, <, >=, <=, !=, <>, ^=

20) student whose MARKS is between 80 & 90 from the STUDENT table
==> select * from student where MARKS between 80 and 90;
==> select * from student where MARKS not between 80 and 90;

21) student whose AGE is 20 & 22
==> select * form student where AGE IN (20,22);

22) LIKE i.e. search for a specific pattern in a column
% (modulus) it matches 0 or more character
_(underscore) it matches exactly one character

23) student whose names start with "Ra"
==> select * from student where NAME LIKE 'Ra%';

24) student whose fourth character is "i" from the student table
==> select * from student where NAME LIKE '___I%';

25) is null operator i.e. select only records with null values

26) student whose age is null from student table
==> select * from student where AGE is null;

27) logical operator
and	true if all the conditions separated by and is true
or	true if any of the conditions separated by or is true
not	displays a record if the conditions(s) is not ture

28) student whose marks is greater than 85 and their names should not start





# point to be noted
i) keywords in sql isn't case sensitive
ii) tables names in sql aren't case sensitive
iii) column names in sql aren't case sensitive
iv) data in sql is case sensitive



bibeksha48
root
root

global database name: orcl
password: root
pluggable database name: orclpdb

https://localhost.adobe.io:5500/em
https://localhost:5500/em








disconnect: to disconnect from current user
connect: to connect the user & password
user name: c##(username)	i.e. BIBEK
password:

connect c##(username)/(password);

to create new user
create user c##(username) identified by (password);
grant all privileges to (username);

SELECT username FROM all_users; 
==> returns all username

SELECT table_name FROM all_tables WHERE owner = 'C##BIBEK';
OR,
SELECT table_name, owner FROM all_tables where owner = 'C##BIBEK';
==> shows all tables from the specific user.

select * from tab;
==> shows created table

set page size (C:\oraclexe\app\oracle\product\10.2.0\server\sqlplus\admin)
==>
set pagesize 170;
set linesize 170;

show default constraint name
==> SELECT CONSTRAINT_NAME,CONSTRAINT_TYPE FROM USER_CONSTRAINTS WHERE TABLE_NAME='EMP12';








insert into student(date, name) values ('02-jan-2000', 'Bibek');
insert into student values(&roll, '&name', '&date');

insert into Student values (&student_id, '&first_name', '&last_name', '&dept', '&Date_of_birth', '&gender', '&religion');
insert into Student values (01, 'Bibek', 'Sah', 'CSE', '02-jan-2002', 'M', 'Hinduism');

insert into Employee values (01, 'Raman', 'Laptop', 'Bibek', 90000);

"/" calls the last formula

ALTER TABLE Employee  MODIFY Account VARCHAR(10);

CREATE TABLE YOUTH (f_name, l_name, sex, DOB) AS SELECT first_name, last_name, Date_of_birth from Student;
CREATE TABLE YOUTH AS SELECT first_name, last_name, Date_of_birth FROM Student;

insert into YOUTH (first_name, last_name, Date_of_birth) values ('Hari', null, '04-Feb-2002');






CREATE TABLE STUDENT(
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(10),
DOB DATE,
DEPT VARCHAR2(10),
RELIGION VARCHAR2(10),
GENDER VARCHAR2(5));


